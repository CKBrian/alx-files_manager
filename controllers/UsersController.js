// add a file UsersController.js that contains the new endpoint:

// POST /users should create a new user in DB:

// To create a user, you must specify an email and a password
// If the email is missing, return an error Missing email with a status code 400
// If the password is missing, return an error Missing password with a status code 400
// If the email already exists in DB, return an error Already exist with a status code 400
// The password must be stored after being hashed in SHA1
// The endpoint is returning the new user with only the email and the id (auto generated by MongoDB) with a status code 201
// The new user must be saved in the collection users:
// email: same as the value received
// password: SHA1 value of the value received

const { ObjectId } = require('mongodb')
const dbClient = require('../utils/db');
const sha1 = require('sha1');
const redisClient = require('../utils/redis')

class UsersController {
    static async postNew(req, res) {
        const { email, password } = req.body;

        if (!email) {
            return res.status(400).json({ error: 'Missing email' });
        }

        if (!password) {
            return res.status(400).json({ error: "Missing password" });
        }

        const userExists = await dbClient.db.collection('users').findOne({ email });

        if (userExists) {
            return res.status(400).json({ error: 'Already exist' });
        }

        const hashedPassword = sha1(password);

        const newUser = {
            email,
            password: hashedPassword,
        };

        try {
            const response = await dbClient.db.collection('users').insertOne(newUser);
            return res.status(201).json({ id: response.insertedId, email });
        } catch(err) {
            console.error('Error creating user:', err);
            return res.status(500).json({ error: 'Internal Server Error' });
        }
    }

    static async getMe(req, res) {
        const token = req.headers['x-token'];
        //console.log(req.headers);

        if (!token) {
            return res.status(401).json({ error: "Unauthorized" });
        }

        const key = `auth_${token}`;
        const userId = await redisClient.get(key);

        if (!userId) {
            return res.status(401).json({ error: 'Unauthorized' });
        }

        const user = await dbClient.db.collection('users').findOne({ _id: ObjectId(userId) }, { projection: { email: 1 } });

        if (!user) {
            return res.status(401).json({ error: 'Unauthorized' });
        }

        return res.status(200).json(user);
    } 
}

module.exports = UsersController;